version: '3'

services:
  # Kafka and Zookeeper for distributed processing
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and shared state across nodes
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # SWAPS Backend Nodes (can be scaled horizontally)
  swaps-backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3001
      - ENABLE_KAFKA=true
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=swaps-trade-service-1
      - KAFKA_CONSUMER_GROUP=swaps-trade-group
      - REDIS_URL=redis://redis:6379
      - HELIUS_API_KEY=${HELIUS_API_KEY}
      - TRADELOOP_MAX_DEPTH=10
      - TRADELOOP_MIN_EFFICIENCY=0.60
      - TRADELOOP_GLOBAL_TIMEOUT_MS=10000
      - TRADELOOP_MAX_SCCS_TO_PROCESS=30
    ports:
      - "3001:3001"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - backend-data-1:/app/data

  swaps-backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3002
      - ENABLE_KAFKA=true
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=swaps-trade-service-2
      - KAFKA_CONSUMER_GROUP=swaps-trade-group
      - REDIS_URL=redis://redis:6379
      - HELIUS_API_KEY=${HELIUS_API_KEY}
      - TRADELOOP_MAX_DEPTH=10
      - TRADELOOP_MIN_EFFICIENCY=0.60
      - TRADELOOP_GLOBAL_TIMEOUT_MS=10000
      - TRADELOOP_MAX_SCCS_TO_PROCESS=30
    ports:
      - "3002:3002"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - backend-data-2:/app/data

  # Load balancer for backend nodes
  nginx:
    image: nginx:1.23-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - swaps-backend-1
      - swaps-backend-2

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost
    depends_on:
      - nginx
    restart: unless-stopped

volumes:
  redis-data:
  backend-data-1:
  backend-data-2: 